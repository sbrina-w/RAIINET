diff --git a/Makefile b/Makefile
index b57076a..1a2a2fb 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,9 @@ CXX = g++
 CXXFLAGS = -std=c++17 -Wall -Wextra -g
 
 # List all your source files here
-SRCS = main.cc gamemodel.cc gamesetup.cc gamecontroller.cc board.cc cell.cc link.cc player.cc subject.cc textdisplay.cc
+SRCS = main.cc gamemodel.cc gamesetup.cc gamecontroller.cc board.cc cell.cc link.cc player.cc subject.cc textdisplay.cc \
+ability.cc linkboost.cc firewall.cc download.cc scan.cc polarize.cc exchange.cc golater.cc hijack.cc
+
 OBJS = $(SRCS:.cc=.o)
 
 # If you want to build the graphics-demo separately
diff --git a/download.cc b/download.cc
index 69c6bce..4e666f7 100644
--- a/download.cc
+++ b/download.cc
@@ -5,6 +5,8 @@
 #include <stdexcept>
 using namespace std;
 
+Download::Download() : Ability('D') {}
+
 // args[0]: link id (char, e.g. "A" or "a")
 // Usage: ability <N> <linkID>
 void Download::execute(GameModel& model, vector<string> args) {
diff --git a/exchange.cc b/exchange.cc
index 13ebc84..4fbe98a 100644
--- a/exchange.cc
+++ b/exchange.cc
@@ -6,6 +6,8 @@
 #include <stdexcept>
 using namespace std;
 
+Exchange::Exchange() : Ability('E') {}
+
 // args[0]: link id 1 (char, e.g. "a")
 // args[1]: link id 2 (char, e.g. "b")
 // Usage: ability <N> <linkID1> <linkID2>
diff --git a/firewall.cc b/firewall.cc
index 48f3f99..4b8782f 100644
--- a/firewall.cc
+++ b/firewall.cc
@@ -5,6 +5,8 @@
 #include <stdexcept>
 using namespace std;
 
+Firewall::Firewall() : Ability('F') {}
+
 // args[0]: row (string, needs to be converted to int)
 // args[1]: col (string, needs to be converted to int)
 // Usage: ability <N> <row> <col>
diff --git a/golater.cc b/golater.cc
index 3803ec1..b6b8e50 100644
--- a/golater.cc
+++ b/golater.cc
@@ -3,6 +3,8 @@
 #include "player.h"
 using namespace std;
 
+GoLater::GoLater() : Ability('G') {}
+
 // No args required
 // Usage: ability <N>
 void GoLater::execute(GameModel& model, vector<string> args) {
diff --git a/hijack.cc b/hijack.cc
index 810df9b..87cd3c4 100644
--- a/hijack.cc
+++ b/hijack.cc
@@ -5,6 +5,8 @@
 #include <stdexcept>
 using namespace std;
 
+Hijack::Hijack() : Ability('H') {}
+
 // args[0]: link id (char, opponent's link, e.g. "A")
 // args[1]: direction (string, e.g. "up", "down", "left", "right")
 // Usage: ability <N> <linkID> <direction>
diff --git a/linkboost.cc b/linkboost.cc
index e8ed76c..e58fbea 100644
--- a/linkboost.cc
+++ b/linkboost.cc
@@ -5,6 +5,8 @@
 #include <stdexcept>
 using namespace std;
 
+LinkBoost::LinkBoost() : Ability('L') {}
+
 // args[0]: link id (char, e.g. "a" or "A")
 // Usage: ability <N> <linkID>
 void LinkBoost::execute(GameModel& model, vector<string> args) {
diff --git a/main.cc b/main.cc
index 29e3aa2..1636284 100644
--- a/main.cc
+++ b/main.cc
@@ -45,9 +45,26 @@ int main(int argc, char *argv[])
         // return 1;
     }
 
+    // print statements to debug ability setup
+    for (int i = 1; i <= 2; ++i) {
+        Player* player = model.getPlayer(i);
+        if (!player) continue;
+        std::cout << "Player " << i << " abilities:\n";
+        // You may need to add a getter for the abilities vector if it's private
+        // For now, add this method to Player:
+        // const std::vector<Ability*>& getAbilities() const { return abilities; }
+        for (const auto& ability : player->getAbilities()) {
+            std::cout << "  ID: " << ability->getID()
+                      << " Used: " << (ability->isUsed() ? "yes" : "no") << "\n";
+        }
+    }
+
     // to draw the initial board
     model.notify(ChangeEvent::GameStart);
 
+
+    
+
     // 5) Enter game loop
     GameController controller(model);
     controller.play();
@@ -57,4 +74,4 @@ int main(int argc, char *argv[])
     //      delete graphicsView;
     //  }
     return 0;
-}
\ No newline at end of file
+}
diff --git a/player.cc b/player.cc
index 60cc629..7a0c2a6 100644
--- a/player.cc
+++ b/player.cc
@@ -1,5 +1,14 @@
 #include "player.h"
 #include "link.h"
+// include abilities
+#include "linkboost.h"
+#include "firewall.h"
+#include "download.h"
+#include "scan.h"
+#include "polarize.h"
+#include "exchange.h"
+#include "golater.h"
+#include "hijack.h"
 
 Player::Player(int playerId)
   : id(playerId),
@@ -13,10 +22,12 @@ Player::Player(int playerId)
 }
 
 Player::~Player() {
-    //clean up owned links
+    // clean up owned links
     for (auto& pair : links) {
         delete pair.second;
     }
+    // clean up abilities
+    for (Ability* a : abilities) delete a;
 }
 
 int Player::getId() const {
@@ -61,11 +72,25 @@ bool Player::knowsOpponentLink(char linkId) const {
     return opponentLinks.find(linkId) != opponentLinks.end();
 }
 
-//fix this later, change to vector of abilities?
 void Player::setAbilities(const std::string& abilityOrder) {
+    // Clean up old abilities if needed
+    for (Ability* a : abilities) delete a;
     abilities.clear();
-    for(char c : abilityOrder) {
-        abilities.push_back(c);
+
+    for (char c : abilityOrder) {
+        Ability* ability = nullptr;
+        switch (c) {
+            case 'L': ability = new LinkBoost(); break;
+            case 'F': ability = new Firewall(); break;
+            case 'D': ability = new Download(); break;
+            case 'S': ability = new Scan(); break;
+            case 'P': ability = new Polarize(); break;
+            case 'E': ability = new Exchange(); break;
+            case 'G': ability = new GoLater(); break;
+            case 'H': ability = new Hijack(); break;
+            default: break;
+        }
+        if (ability) abilities.push_back(ability);
     }
 }
 
diff --git a/player.h b/player.h
index 07e94e0..05a43ca 100644
--- a/player.h
+++ b/player.h
@@ -4,6 +4,7 @@
 #include <map>
 #include <vector>
 #include <string>
+#include "ability.h"
 
 class Link;
 class Ability;
@@ -14,7 +15,7 @@ private:
     int id;
     std::map<char, Link *> links;
     std::map<char, Link *> opponentLinks;
-    std::vector<char> abilities;
+    std::vector<Ability*> abilities;
     int abilitiesRemaining;
     int downloadedData;
     int downloadedVirus;
@@ -45,6 +46,9 @@ public:
     
     void playAbility(int abilityInd, int target);
     void chooseAbility(const std::string& abilities);
+
+    // getter for abilities, use for debugging
+    const std::vector<Ability*>& getAbilities() const { return abilities; }
 };
 
 #endif
diff --git a/polarize.cc b/polarize.cc
index 00f96c7..1bf3aa6 100644
--- a/polarize.cc
+++ b/polarize.cc
@@ -5,6 +5,8 @@
 #include <stdexcept>
 using namespace std;
 
+Polarize::Polarize() : Ability('P') {}
+
 // args[0]: link id (char, e.g. "A" or "a")
 // Usage: ability <N> <linkID>
 void Polarize::execute(GameModel& model, vector<string> args) {
diff --git a/scan.cc b/scan.cc
index 89ef891..ff56020 100644
--- a/scan.cc
+++ b/scan.cc
@@ -6,6 +6,8 @@
 #include <stdexcept>
 using namespace std;
 
+Scan::Scan() : Ability('S') {}
+
 // args[0]: link id (char, e.g. "A" or "a")
 // Usage: ability <N> <linkID>
 void Scan::execute(GameModel& model, vector<string> args) {
